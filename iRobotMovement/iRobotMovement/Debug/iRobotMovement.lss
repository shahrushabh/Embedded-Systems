
iRobotMovement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000822  000008b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000822  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800106  00800106  000008bc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000178  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ca3  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000655  00000000  00000000  00002733  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ca3  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003dc  00000000  00000000  00003a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000070c  00000000  00000000  00003e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c80  00000000  00000000  00004514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  00005194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	9d c2       	rjmp	.+1338   	; 0x560 <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a6 e0       	ldi	r26, 0x06	; 6
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 30       	cpi	r26, 0x0C	; 12
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e2 e2       	ldi	r30, 0x22	; 34
  b0:	f8 e0       	ldi	r31, 0x08	; 8
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	ac c3       	rjmp	.+1880   	; 0x81e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "lcd.h"
#include "util.h"
#include "movement.h"

int main(void)
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
	oi_t *sensor_data = oi_alloc();
  d0:	e3 d0       	rcall	.+454    	; 0x298 <oi_alloc>
  d2:	ec 01       	movw	r28, r24
	oi_init(sensor_data);
  d4:	e7 d1       	rcall	.+974    	; 0x4a4 <oi_init>
	int sum = 0;
  d6:	00 e0       	ldi	r16, 0x00	; 0
  d8:	10 e0       	ldi	r17, 0x00	; 0
	while(sum < 200)
	{
		oi_set_wheels(200,200);
  da:	68 ec       	ldi	r22, 0xC8	; 200
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	88 ec       	ldi	r24, 0xC8	; 200
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	06 d1       	rcall	.+524    	; 0x2f0 <oi_set_wheels>
		oi_update(sensor_data); // get current state of all sensors
  e4:	ce 01       	movw	r24, r28
  e6:	23 d1       	rcall	.+582    	; 0x32e <oi_update>
		sum += sensor_data->distance;
  e8:	8c 85       	ldd	r24, Y+12	; 0x0c
  ea:	9d 85       	ldd	r25, Y+13	; 0x0d
  ec:	08 0f       	add	r16, r24
  ee:	19 1f       	adc	r17, r25
		if (sensor_data->bumper_left || sensor_data->bumper_right ) 
  f0:	88 81       	ld	r24, Y
  f2:	83 70       	andi	r24, 0x03	; 3
  f4:	41 f0       	breq	.+16     	; 0x106 <main+0x3e>
		{
			obstacle_encountered(sensor_data);
  f6:	ce 01       	movw	r24, r28
  f8:	98 d0       	rcall	.+304    	; 0x22a <obstacle_encountered>
			sum -= 150;
  fa:	06 59       	subi	r16, 0x96	; 150
  fc:	11 09       	sbc	r17, r1
int main(void)
{
	oi_t *sensor_data = oi_alloc();
	oi_init(sensor_data);
	int sum = 0;
	while(sum < 200)
  fe:	08 3c       	cpi	r16, 0xC8	; 200
 100:	11 05       	cpc	r17, r1
 102:	5c f3       	brlt	.-42     	; 0xda <main+0x12>
 104:	03 c0       	rjmp	.+6      	; 0x10c <main+0x44>
 106:	08 3c       	cpi	r16, 0xC8	; 200
 108:	11 05       	cpc	r17, r1
 10a:	3c f3       	brlt	.-50     	; 0xda <main+0x12>
		{
			obstacle_encountered(sensor_data);
			sum -= 150;
		}
	}
	oi_set_wheels(0,0);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	ed d0       	rcall	.+474    	; 0x2f0 <oi_set_wheels>
	oi_free(sensor_data);
 116:	ce 01       	movw	r24, r28
 118:	c5 d0       	rcall	.+394    	; 0x2a4 <oi_free>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret

00000128 <move_forward>:
#include "open_interface.h"

void move_forward(oi_t *sensor, int centimeteres){
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	8c 01       	movw	r16, r24
 136:	7b 01       	movw	r14, r22
	int run = 0;
	if(centimeteres > 0)
 138:	16 16       	cp	r1, r22
 13a:	17 06       	cpc	r1, r23
 13c:	94 f4       	brge	.+36     	; 0x162 <move_forward+0x3a>
	{
		oi_set_wheels(200,200);
 13e:	68 ec       	ldi	r22, 0xC8	; 200
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	88 ec       	ldi	r24, 0xC8	; 200
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	d4 d0       	rcall	.+424    	; 0x2f0 <oi_set_wheels>
#include "open_interface.h"

void move_forward(oi_t *sensor, int centimeteres){
	int run = 0;
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
	if(centimeteres > 0)
	{
		oi_set_wheels(200,200);
		while (run < centimeteres)
		{
			oi_update(sensor);
 14c:	c8 01       	movw	r24, r16
 14e:	ef d0       	rcall	.+478    	; 0x32e <oi_update>
			run += sensor->distance;
 150:	f8 01       	movw	r30, r16
 152:	84 85       	ldd	r24, Z+12	; 0x0c
 154:	95 85       	ldd	r25, Z+13	; 0x0d
 156:	c8 0f       	add	r28, r24
 158:	d9 1f       	adc	r29, r25
void move_forward(oi_t *sensor, int centimeteres){
	int run = 0;
	if(centimeteres > 0)
	{
		oi_set_wheels(200,200);
		while (run < centimeteres)
 15a:	ce 15       	cp	r28, r14
 15c:	df 05       	cpc	r29, r15
 15e:	b4 f3       	brlt	.-20     	; 0x14c <move_forward+0x24>
 160:	13 c0       	rjmp	.+38     	; 0x188 <move_forward+0x60>
		{
			oi_update(sensor);
			run += sensor->distance;
		}
	}
	else if (centimeteres < 0 )
 162:	77 23       	and	r23, r23
 164:	8c f4       	brge	.+34     	; 0x188 <move_forward+0x60>
	{
		oi_set_wheels(-200,-200);
 166:	68 e3       	ldi	r22, 0x38	; 56
 168:	7f ef       	ldi	r23, 0xFF	; 255
 16a:	88 e3       	ldi	r24, 0x38	; 56
 16c:	9f ef       	ldi	r25, 0xFF	; 255
 16e:	c0 d0       	rcall	.+384    	; 0x2f0 <oi_set_wheels>
#include "open_interface.h"

void move_forward(oi_t *sensor, int centimeteres){
	int run = 0;
 170:	c0 e0       	ldi	r28, 0x00	; 0
 172:	d0 e0       	ldi	r29, 0x00	; 0
	else if (centimeteres < 0 )
	{
		oi_set_wheels(-200,-200);
		while (run > centimeteres)
		{
			oi_update(sensor);
 174:	c8 01       	movw	r24, r16
 176:	db d0       	rcall	.+438    	; 0x32e <oi_update>
			run += sensor->distance;
 178:	f8 01       	movw	r30, r16
 17a:	84 85       	ldd	r24, Z+12	; 0x0c
 17c:	95 85       	ldd	r25, Z+13	; 0x0d
 17e:	c8 0f       	add	r28, r24
 180:	d9 1f       	adc	r29, r25
		}
	}
	else if (centimeteres < 0 )
	{
		oi_set_wheels(-200,-200);
		while (run > centimeteres)
 182:	ec 16       	cp	r14, r28
 184:	fd 06       	cpc	r15, r29
 186:	b4 f3       	brlt	.-20     	; 0x174 <move_forward+0x4c>
			oi_update(sensor);
			run += sensor->distance;
		}
	}

	oi_set_wheels(0,0);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	af d0       	rcall	.+350    	; 0x2f0 <oi_set_wheels>
	oi_update(sensor);
 192:	c8 01       	movw	r24, r16
 194:	cc d0       	rcall	.+408    	; 0x32e <oi_update>
	wait_ms(50);
 196:	82 e3       	ldi	r24, 0x32	; 50
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	cc d1       	rcall	.+920    	; 0x534 <wait_ms>
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	08 95       	ret

000001aa <turn_wheels>:

void turn_wheels(oi_t *sensor, int degrees){
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
 1b8:	7b 01       	movw	r14, r22
	oi_update(sensor);
 1ba:	b9 d0       	rcall	.+370    	; 0x32e <oi_update>
	int _angle = 0;
	int anglecorrection = (degrees*(360/370));
	
	if(degrees > 0) //turn counterclockwise (ve)
 1bc:	1e 14       	cp	r1, r14
 1be:	1f 04       	cpc	r1, r15
 1c0:	8c f4       	brge	.+34     	; 0x1e4 <turn_wheels+0x3a>
	{
		oi_set_wheels(100,-100);
 1c2:	6c e9       	ldi	r22, 0x9C	; 156
 1c4:	7f ef       	ldi	r23, 0xFF	; 255
 1c6:	84 e6       	ldi	r24, 0x64	; 100
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	92 d0       	rcall	.+292    	; 0x2f0 <oi_set_wheels>
	wait_ms(50);
}

void turn_wheels(oi_t *sensor, int degrees){
	oi_update(sensor);
	int _angle = 0;
 1cc:	00 e0       	ldi	r16, 0x00	; 0
 1ce:	10 e0       	ldi	r17, 0x00	; 0
	
	if(degrees > 0) //turn counterclockwise (ve)
	{
		oi_set_wheels(100,-100);
		while (_angle < degrees - anglecorrection){
			oi_update(sensor);
 1d0:	ce 01       	movw	r24, r28
 1d2:	ad d0       	rcall	.+346    	; 0x32e <oi_update>
			_angle += sensor->angle;
 1d4:	8e 85       	ldd	r24, Y+14	; 0x0e
 1d6:	9f 85       	ldd	r25, Y+15	; 0x0f
 1d8:	08 0f       	add	r16, r24
 1da:	19 1f       	adc	r17, r25
	int anglecorrection = (degrees*(360/370));
	
	if(degrees > 0) //turn counterclockwise (ve)
	{
		oi_set_wheels(100,-100);
		while (_angle < degrees - anglecorrection){
 1dc:	0e 15       	cp	r16, r14
 1de:	1f 05       	cpc	r17, r15
 1e0:	bc f3       	brlt	.-18     	; 0x1d0 <turn_wheels+0x26>
 1e2:	12 c0       	rjmp	.+36     	; 0x208 <turn_wheels+0x5e>
			_angle += sensor->angle;
		}
	}
	else // move clockwise
	{
		oi_set_wheels(-100,100);
 1e4:	64 e6       	ldi	r22, 0x64	; 100
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	8c e9       	ldi	r24, 0x9C	; 156
 1ea:	9f ef       	ldi	r25, 0xFF	; 255
 1ec:	81 d0       	rcall	.+258    	; 0x2f0 <oi_set_wheels>
		while (_angle > degrees + anglecorrection){
 1ee:	ff 20       	and	r15, r15
 1f0:	5c f4       	brge	.+22     	; 0x208 <turn_wheels+0x5e>
	wait_ms(50);
}

void turn_wheels(oi_t *sensor, int degrees){
	oi_update(sensor);
	int _angle = 0;
 1f2:	00 e0       	ldi	r16, 0x00	; 0
 1f4:	10 e0       	ldi	r17, 0x00	; 0
	}
	else // move clockwise
	{
		oi_set_wheels(-100,100);
		while (_angle > degrees + anglecorrection){
			oi_update(sensor);
 1f6:	ce 01       	movw	r24, r28
 1f8:	9a d0       	rcall	.+308    	; 0x32e <oi_update>
			_angle += sensor->angle;
 1fa:	8e 85       	ldd	r24, Y+14	; 0x0e
 1fc:	9f 85       	ldd	r25, Y+15	; 0x0f
 1fe:	08 0f       	add	r16, r24
 200:	19 1f       	adc	r17, r25
		}
	}
	else // move clockwise
	{
		oi_set_wheels(-100,100);
		while (_angle > degrees + anglecorrection){
 202:	e0 16       	cp	r14, r16
 204:	f1 06       	cpc	r15, r17
 206:	bc f3       	brlt	.-18     	; 0x1f6 <turn_wheels+0x4c>
			oi_update(sensor);
			_angle += sensor->angle;
		}
	}
	
	oi_set_wheels(0,0);
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	6f d0       	rcall	.+222    	; 0x2f0 <oi_set_wheels>
	oi_update(sensor);
 212:	ce 01       	movw	r24, r28
 214:	8c d0       	rcall	.+280    	; 0x32e <oi_update>
	wait_ms(50);
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	8c d1       	rcall	.+792    	; 0x534 <wait_ms>
	
	
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	08 95       	ret

0000022a <obstacle_encountered>:
// this method will end up -15mm of where you bumped in. 
void obstacle_encountered(oi_t *sensor){
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
	oi_update(sensor);
 230:	7e d0       	rcall	.+252    	; 0x32e <oi_update>
	if(sensor->bumper_left) 
 232:	88 81       	ld	r24, Y
 234:	81 ff       	sbrs	r24, 1
 236:	16 c0       	rjmp	.+44     	; 0x264 <obstacle_encountered+0x3a>
	{
		oi_set_wheels(0,0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	57 d0       	rcall	.+174    	; 0x2f0 <oi_set_wheels>
		move_forward(sensor,-150);
 242:	6a e6       	ldi	r22, 0x6A	; 106
 244:	7f ef       	ldi	r23, 0xFF	; 255
 246:	ce 01       	movw	r24, r28
 248:	6f df       	rcall	.-290    	; 0x128 <move_forward>
		turn_wheels(sensor,-90);
 24a:	66 ea       	ldi	r22, 0xA6	; 166
 24c:	7f ef       	ldi	r23, 0xFF	; 255
 24e:	ce 01       	movw	r24, r28
 250:	ac df       	rcall	.-168    	; 0x1aa <turn_wheels>
		move_forward(sensor,250);
 252:	6a ef       	ldi	r22, 0xFA	; 250
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	ce 01       	movw	r24, r28
 258:	67 df       	rcall	.-306    	; 0x128 <move_forward>
		turn_wheels(sensor,90);
 25a:	6a e5       	ldi	r22, 0x5A	; 90
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	ce 01       	movw	r24, r28
 260:	a4 df       	rcall	.-184    	; 0x1aa <turn_wheels>
 262:	17 c0       	rjmp	.+46     	; 0x292 <obstacle_encountered+0x68>
		
			
	} else if(sensor->bumper_right){
 264:	80 ff       	sbrs	r24, 0
 266:	15 c0       	rjmp	.+42     	; 0x292 <obstacle_encountered+0x68>
		oi_set_wheels(0,0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	3f d0       	rcall	.+126    	; 0x2f0 <oi_set_wheels>
		move_forward(sensor,-150);
 272:	6a e6       	ldi	r22, 0x6A	; 106
 274:	7f ef       	ldi	r23, 0xFF	; 255
 276:	ce 01       	movw	r24, r28
 278:	57 df       	rcall	.-338    	; 0x128 <move_forward>
		turn_wheels(sensor,90);
 27a:	6a e5       	ldi	r22, 0x5A	; 90
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	ce 01       	movw	r24, r28
 280:	94 df       	rcall	.-216    	; 0x1aa <turn_wheels>
		move_forward(sensor,250);
 282:	6a ef       	ldi	r22, 0xFA	; 250
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	ce 01       	movw	r24, r28
 288:	4f df       	rcall	.-354    	; 0x128 <move_forward>
		turn_wheels(sensor,-90);
 28a:	66 ea       	ldi	r22, 0xA6	; 166
 28c:	7f ef       	ldi	r23, 0xFF	; 255
 28e:	ce 01       	movw	r24, r28
 290:	8c df       	rcall	.-232    	; 0x1aa <turn_wheels>
	}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
 298:	64 e3       	ldi	r22, 0x34	; 52
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	76 c1       	rjmp	.+748    	; 0x58e <calloc>
 2a2:	08 95       	ret

000002a4 <oi_free>:
 2a4:	26 c2       	rjmp	.+1100   	; 0x6f2 <free>
 2a6:	08 95       	ret

000002a8 <oi_byte_tx>:
 2a8:	eb e9       	ldi	r30, 0x9B	; 155
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	90 81       	ld	r25, Z
 2ae:	95 ff       	sbrs	r25, 5
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <oi_byte_tx+0x4>
 2b2:	80 93 9c 00 	sts	0x009C, r24
 2b6:	08 95       	ret

000002b8 <oi_set_leds>:
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	08 2f       	mov	r16, r24
 2c2:	16 2f       	mov	r17, r22
 2c4:	d4 2f       	mov	r29, r20
 2c6:	c2 2f       	mov	r28, r18
 2c8:	8b e8       	ldi	r24, 0x8B	; 139
 2ca:	ee df       	rcall	.-36     	; 0x2a8 <oi_byte_tx>
 2cc:	11 23       	and	r17, r17
 2ce:	29 f0       	breq	.+10     	; 0x2da <oi_set_leds+0x22>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	01 11       	cpse	r16, r1
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <oi_set_leds+0x24>
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <oi_set_leds+0x24>
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	e5 df       	rcall	.-54     	; 0x2a8 <oi_byte_tx>
 2de:	8d 2f       	mov	r24, r29
 2e0:	e3 df       	rcall	.-58     	; 0x2a8 <oi_byte_tx>
 2e2:	8c 2f       	mov	r24, r28
 2e4:	e1 df       	rcall	.-62     	; 0x2a8 <oi_byte_tx>
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	08 95       	ret

000002f0 <oi_set_wheels>:
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	18 2f       	mov	r17, r24
 2fa:	09 2f       	mov	r16, r25
 2fc:	c6 2f       	mov	r28, r22
 2fe:	d7 2f       	mov	r29, r23
 300:	81 e9       	ldi	r24, 0x91	; 145
 302:	d2 df       	rcall	.-92     	; 0x2a8 <oi_byte_tx>
 304:	80 2f       	mov	r24, r16
 306:	d0 df       	rcall	.-96     	; 0x2a8 <oi_byte_tx>
 308:	81 2f       	mov	r24, r17
 30a:	ce df       	rcall	.-100    	; 0x2a8 <oi_byte_tx>
 30c:	8d 2f       	mov	r24, r29
 30e:	cc df       	rcall	.-104    	; 0x2a8 <oi_byte_tx>
 310:	8c 2f       	mov	r24, r28
 312:	ca df       	rcall	.-108    	; 0x2a8 <oi_byte_tx>
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	08 95       	ret

0000031e <oi_byte_rx>:


// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) {
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
 31e:	eb e9       	ldi	r30, 0x9B	; 155
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	88 23       	and	r24, r24
 326:	ec f7       	brge	.-6      	; 0x322 <oi_byte_rx+0x4>

	return UDR1;
 328:	80 91 9c 00 	lds	r24, 0x009C
}
 32c:	08 95       	ret

0000032e <oi_update>:
}



/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
 32e:	ef 92       	push	r14
 330:	ff 92       	push	r15
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
 33c:	80 91 9b 00 	lds	r24, 0x009B
 340:	88 23       	and	r24, r24
 342:	44 f4       	brge	.+16     	; 0x354 <oi_update+0x26>
		i = UDR1;
 344:	ac e9       	ldi	r26, 0x9C	; 156
 346:	b0 e0       	ldi	r27, 0x00	; 0
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
 348:	eb e9       	ldi	r30, 0x9B	; 155
 34a:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
 34c:	8c 91       	ld	r24, X
/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) {
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
 34e:	80 81       	ld	r24, Z
 350:	88 23       	and	r24, r24
 352:	e4 f3       	brlt	.-8      	; 0x34c <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
 354:	8e e8       	ldi	r24, 0x8E	; 142
 356:	a8 df       	rcall	.-176    	; 0x2a8 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
 358:	86 e0       	ldi	r24, 0x06	; 6
 35a:	a6 df       	rcall	.-180    	; 0x2a8 <oi_byte_tx>
 35c:	e7 01       	movw	r28, r14
 35e:	87 01       	movw	r16, r14
 360:	0c 5c       	subi	r16, 0xCC	; 204
 362:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
 364:	dc df       	rcall	.-72     	; 0x31e <oi_byte_rx>
 366:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) {
 368:	c0 17       	cp	r28, r16
 36a:	d1 07       	cpc	r29, r17
 36c:	d9 f7       	brne	.-10     	; 0x364 <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
 36e:	f7 01       	movw	r30, r14
 370:	84 85       	ldd	r24, Z+12	; 0x0c
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	98 2f       	mov	r25, r24
 376:	88 27       	eor	r24, r24
 378:	25 85       	ldd	r18, Z+13	; 0x0d
 37a:	82 0f       	add	r24, r18
 37c:	91 1d       	adc	r25, r1
 37e:	95 87       	std	Z+13, r25	; 0x0d
 380:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
 382:	86 85       	ldd	r24, Z+14	; 0x0e
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	98 2f       	mov	r25, r24
 388:	88 27       	eor	r24, r24
 38a:	27 85       	ldd	r18, Z+15	; 0x0f
 38c:	82 0f       	add	r24, r18
 38e:	91 1d       	adc	r25, r1
 390:	97 87       	std	Z+15, r25	; 0x0f
 392:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
 394:	81 89       	ldd	r24, Z+17	; 0x11
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	98 2f       	mov	r25, r24
 39a:	88 27       	eor	r24, r24
 39c:	22 89       	ldd	r18, Z+18	; 0x12
 39e:	82 0f       	add	r24, r18
 3a0:	91 1d       	adc	r25, r1
 3a2:	92 8b       	std	Z+18, r25	; 0x12
 3a4:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
 3a6:	83 89       	ldd	r24, Z+19	; 0x13
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	98 2f       	mov	r25, r24
 3ac:	88 27       	eor	r24, r24
 3ae:	24 89       	ldd	r18, Z+20	; 0x14
 3b0:	82 0f       	add	r24, r18
 3b2:	91 1d       	adc	r25, r1
 3b4:	94 8b       	std	Z+20, r25	; 0x14
 3b6:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
 3b8:	86 89       	ldd	r24, Z+22	; 0x16
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	98 2f       	mov	r25, r24
 3be:	88 27       	eor	r24, r24
 3c0:	27 89       	ldd	r18, Z+23	; 0x17
 3c2:	82 0f       	add	r24, r18
 3c4:	91 1d       	adc	r25, r1
 3c6:	97 8b       	std	Z+23, r25	; 0x17
 3c8:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
 3ca:	80 8d       	ldd	r24, Z+24	; 0x18
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	98 2f       	mov	r25, r24
 3d0:	88 27       	eor	r24, r24
 3d2:	21 8d       	ldd	r18, Z+25	; 0x19
 3d4:	82 0f       	add	r24, r18
 3d6:	91 1d       	adc	r25, r1
 3d8:	91 8f       	std	Z+25, r25	; 0x19
 3da:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
 3dc:	82 8d       	ldd	r24, Z+26	; 0x1a
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	98 2f       	mov	r25, r24
 3e2:	88 27       	eor	r24, r24
 3e4:	23 8d       	ldd	r18, Z+27	; 0x1b
 3e6:	82 0f       	add	r24, r18
 3e8:	91 1d       	adc	r25, r1
 3ea:	93 8f       	std	Z+27, r25	; 0x1b
 3ec:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
 3ee:	84 8d       	ldd	r24, Z+28	; 0x1c
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	98 2f       	mov	r25, r24
 3f4:	88 27       	eor	r24, r24
 3f6:	25 8d       	ldd	r18, Z+29	; 0x1d
 3f8:	82 0f       	add	r24, r18
 3fa:	91 1d       	adc	r25, r1
 3fc:	95 8f       	std	Z+29, r25	; 0x1d
 3fe:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
 400:	86 8d       	ldd	r24, Z+30	; 0x1e
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	98 2f       	mov	r25, r24
 406:	88 27       	eor	r24, r24
 408:	27 8d       	ldd	r18, Z+31	; 0x1f
 40a:	82 0f       	add	r24, r18
 40c:	91 1d       	adc	r25, r1
 40e:	97 8f       	std	Z+31, r25	; 0x1f
 410:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
 412:	80 a1       	ldd	r24, Z+32	; 0x20
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	98 2f       	mov	r25, r24
 418:	88 27       	eor	r24, r24
 41a:	21 a1       	ldd	r18, Z+33	; 0x21
 41c:	82 0f       	add	r24, r18
 41e:	91 1d       	adc	r25, r1
 420:	91 a3       	std	Z+33, r25	; 0x21
 422:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
 424:	82 a1       	ldd	r24, Z+34	; 0x22
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	98 2f       	mov	r25, r24
 42a:	88 27       	eor	r24, r24
 42c:	23 a1       	ldd	r18, Z+35	; 0x23
 42e:	82 0f       	add	r24, r18
 430:	91 1d       	adc	r25, r1
 432:	93 a3       	std	Z+35, r25	; 0x23
 434:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
 436:	82 a5       	ldd	r24, Z+42	; 0x2a
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	21 a5       	ldd	r18, Z+41	; 0x29
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	32 2f       	mov	r19, r18
 440:	22 27       	eor	r18, r18
 442:	28 0f       	add	r18, r24
 444:	39 1f       	adc	r19, r25
 446:	36 a3       	std	Z+38, r19	; 0x26
 448:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
 44a:	20 a9       	ldd	r18, Z+48	; 0x30
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	32 2f       	mov	r19, r18
 450:	22 27       	eor	r18, r18
 452:	82 0f       	add	r24, r18
 454:	93 1f       	adc	r25, r19
 456:	95 a7       	std	Z+45, r25	; 0x2d
 458:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
 45a:	82 a9       	ldd	r24, Z+50	; 0x32
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	98 2f       	mov	r25, r24
 460:	88 27       	eor	r24, r24
 462:	23 a9       	ldd	r18, Z+51	; 0x33
 464:	82 0f       	add	r24, r18
 466:	91 1d       	adc	r25, r1
 468:	97 a7       	std	Z+47, r25	; 0x2f
 46a:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
 46c:	84 a9       	ldd	r24, Z+52	; 0x34
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	98 2f       	mov	r25, r24
 472:	88 27       	eor	r24, r24
 474:	25 a9       	ldd	r18, Z+53	; 0x35
 476:	82 0f       	add	r24, r18
 478:	91 1d       	adc	r25, r1
 47a:	91 ab       	std	Z+49, r25	; 0x31
 47c:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
 47e:	86 a9       	ldd	r24, Z+54	; 0x36
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	98 2f       	mov	r25, r24
 484:	88 27       	eor	r24, r24
 486:	27 a9       	ldd	r18, Z+55	; 0x37
 488:	82 0f       	add	r24, r18
 48a:	91 1d       	adc	r25, r1
 48c:	93 ab       	std	Z+51, r25	; 0x33
 48e:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(15); // reduces USART errors that occur when continuously transmitting/receiving
 490:	8f e0       	ldi	r24, 0x0F	; 15
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	4f d0       	rcall	.+158    	; 0x534 <wait_ms>
}
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	ef 90       	pop	r14
 4a2:	08 95       	ret

000004a4 <oi_init>:
void oi_free(oi_t *self) {
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) {
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
 4ae:	09 e9       	ldi	r16, 0x99	; 153
 4b0:	10 e0       	ldi	r17, 0x00	; 0
 4b2:	80 e1       	ldi	r24, 0x10	; 16
 4b4:	f8 01       	movw	r30, r16
 4b6:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
 4b8:	88 e1       	ldi	r24, 0x18	; 24
 4ba:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
 4c4:	80 e8       	ldi	r24, 0x80	; 128
 4c6:	f0 de       	rcall	.-544    	; 0x2a8 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
 4c8:	81 e8       	ldi	r24, 0x81	; 129
 4ca:	ee de       	rcall	.-548    	; 0x2a8 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
 4cc:	88 e0       	ldi	r24, 0x08	; 8
 4ce:	ec de       	rcall	.-552    	; 0x2a8 <oi_byte_tx>
	wait_ms(100);
 4d0:	84 e6       	ldi	r24, 0x64	; 100
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	2f d0       	rcall	.+94     	; 0x534 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
 4d6:	81 e2       	ldi	r24, 0x21	; 33
 4d8:	f8 01       	movw	r30, r16
 4da:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
 4dc:	84 e8       	ldi	r24, 0x84	; 132
 4de:	e4 de       	rcall	.-568    	; 0x2a8 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
 4e0:	2f ef       	ldi	r18, 0xFF	; 255
 4e2:	47 e0       	ldi	r20, 0x07	; 7
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	e7 de       	rcall	.-562    	; 0x2b8 <oi_set_leds>
	
	oi_update(self);
 4ea:	ce 01       	movw	r24, r28
 4ec:	20 df       	rcall	.-448    	; 0x32e <oi_update>
	oi_update(self); // call twice to clear distance/angle
 4ee:	ce 01       	movw	r24, r28
 4f0:	1e df       	rcall	.-452    	; 0x32e <oi_update>
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	08 95       	ret

000004fc <timer2_start>:
}


// Start timer2
void timer2_start(char unit) {
	timer2_tick=0;
 4fc:	10 92 07 01 	sts	0x0107, r1
 500:	10 92 06 01 	sts	0x0106, r1
	if ( unit == 0 ) { 		//unit = 0 is for slow 
 504:	81 11       	cpse	r24, r1
 506:	06 c0       	rjmp	.+12     	; 0x514 <timer2_start+0x18>
        TCCR2=0b00001011;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 64
 508:	8b e0       	ldi	r24, 0x0B	; 11
 50a:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
 50c:	87 b7       	in	r24, 0x37	; 55
 50e:	80 68       	ori	r24, 0x80	; 128
 510:	87 bf       	out	0x37, r24	; 55
 512:	07 c0       	rjmp	.+14     	; 0x522 <timer2_start+0x26>
	}
	if (unit == 1) { 		//unit = 1 is for fast
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	29 f4       	brne	.+10     	; 0x522 <timer2_start+0x26>
        TCCR2=0b00001001;	//WGM:CTC, COM:OC2 disconnected,pre_scaler = 1
 518:	89 e0       	ldi	r24, 0x09	; 9
 51a:	85 bd       	out	0x25, r24	; 37
        TIMSK|=0b10000000;	//Enabling O.C. Interrupt for Timer2
 51c:	87 b7       	in	r24, 0x37	; 55
 51e:	80 68       	ori	r24, 0x80	; 128
 520:	87 bf       	out	0x37, r24	; 55
	}
	sei();
 522:	78 94       	sei
 524:	08 95       	ret

00000526 <timer2_stop>:
}


// Stop timer2
void timer2_stop() {
	TIMSK&=~0b10000000;		//Disabling O.C. Interrupt for Timer2
 526:	87 b7       	in	r24, 0x37	; 55
 528:	8f 77       	andi	r24, 0x7F	; 127
 52a:	87 bf       	out	0x37, r24	; 55
	TCCR2&=0b01111111;		//Clearing O.C. settings
 52c:	85 b5       	in	r24, 0x25	; 37
 52e:	8f 77       	andi	r24, 0x7F	; 127
 530:	85 bd       	out	0x25, r24	; 37
 532:	08 95       	ret

00000534 <wait_ms>:
void timer2_start(char unit);
void timer2_stop();


/// Blocks for a specified number of milliseconds
void wait_ms(unsigned int time_val) {
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ec 01       	movw	r28, r24
	//Seting OC value for time requested
	//Clock is 16 MHz. At a prescaler of 64, 250 timer ticks = 1ms.
	OCR2=250; 				
 53a:	8a ef       	ldi	r24, 0xFA	; 250
 53c:	83 bd       	out	0x23, r24	; 35
	timer2_tick=0;
 53e:	10 92 07 01 	sts	0x0107, r1
 542:	10 92 06 01 	sts	0x0106, r1
	timer2_start(0);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	d9 df       	rcall	.-78     	; 0x4fc <timer2_start>

	//Waiting for time
	while(timer2_tick < time_val);
 54a:	20 91 06 01 	lds	r18, 0x0106
 54e:	30 91 07 01 	lds	r19, 0x0107
 552:	2c 17       	cp	r18, r28
 554:	3d 07       	cpc	r19, r29
 556:	c8 f3       	brcs	.-14     	; 0x54a <wait_ms+0x16>

	timer2_stop();
 558:	e6 df       	rcall	.-52     	; 0x526 <timer2_stop>
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <__vector_9>:
	TCCR2&=0b01111111;		//Clearing O.C. settings
}


// Interrupt handler (runs every 1 ms)
ISR (TIMER2_COMP_vect) {
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
	timer2_tick++;
 56e:	80 91 06 01 	lds	r24, 0x0106
 572:	90 91 07 01 	lds	r25, 0x0107
 576:	01 96       	adiw	r24, 0x01	; 1
 578:	90 93 07 01 	sts	0x0107, r25
 57c:	80 93 06 01 	sts	0x0106, r24
}
 580:	9f 91       	pop	r25
 582:	8f 91       	pop	r24
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <calloc>:
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	86 9f       	mul	r24, r22
 598:	80 01       	movw	r16, r0
 59a:	87 9f       	mul	r24, r23
 59c:	10 0d       	add	r17, r0
 59e:	96 9f       	mul	r25, r22
 5a0:	10 0d       	add	r17, r0
 5a2:	11 24       	eor	r1, r1
 5a4:	c8 01       	movw	r24, r16
 5a6:	0d d0       	rcall	.+26     	; 0x5c2 <malloc>
 5a8:	ec 01       	movw	r28, r24
 5aa:	00 97       	sbiw	r24, 0x00	; 0
 5ac:	21 f0       	breq	.+8      	; 0x5b6 <calloc+0x28>
 5ae:	a8 01       	movw	r20, r16
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	2d d1       	rcall	.+602    	; 0x810 <memset>
 5b6:	ce 01       	movw	r24, r28
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	08 95       	ret

000005c2 <malloc>:
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	82 30       	cpi	r24, 0x02	; 2
 5c8:	91 05       	cpc	r25, r1
 5ca:	10 f4       	brcc	.+4      	; 0x5d0 <malloc+0xe>
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	e0 91 0a 01 	lds	r30, 0x010A
 5d4:	f0 91 0b 01 	lds	r31, 0x010B
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	a0 e0       	ldi	r26, 0x00	; 0
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	30 97       	sbiw	r30, 0x00	; 0
 5e2:	39 f1       	breq	.+78     	; 0x632 <malloc+0x70>
 5e4:	40 81       	ld	r20, Z
 5e6:	51 81       	ldd	r21, Z+1	; 0x01
 5e8:	48 17       	cp	r20, r24
 5ea:	59 07       	cpc	r21, r25
 5ec:	b8 f0       	brcs	.+46     	; 0x61c <malloc+0x5a>
 5ee:	48 17       	cp	r20, r24
 5f0:	59 07       	cpc	r21, r25
 5f2:	71 f4       	brne	.+28     	; 0x610 <malloc+0x4e>
 5f4:	82 81       	ldd	r24, Z+2	; 0x02
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	10 97       	sbiw	r26, 0x00	; 0
 5fa:	29 f0       	breq	.+10     	; 0x606 <malloc+0x44>
 5fc:	13 96       	adiw	r26, 0x03	; 3
 5fe:	9c 93       	st	X, r25
 600:	8e 93       	st	-X, r24
 602:	12 97       	sbiw	r26, 0x02	; 2
 604:	2c c0       	rjmp	.+88     	; 0x65e <malloc+0x9c>
 606:	90 93 0b 01 	sts	0x010B, r25
 60a:	80 93 0a 01 	sts	0x010A, r24
 60e:	27 c0       	rjmp	.+78     	; 0x65e <malloc+0x9c>
 610:	21 15       	cp	r18, r1
 612:	31 05       	cpc	r19, r1
 614:	31 f0       	breq	.+12     	; 0x622 <malloc+0x60>
 616:	42 17       	cp	r20, r18
 618:	53 07       	cpc	r21, r19
 61a:	18 f0       	brcs	.+6      	; 0x622 <malloc+0x60>
 61c:	a9 01       	movw	r20, r18
 61e:	db 01       	movw	r26, r22
 620:	01 c0       	rjmp	.+2      	; 0x624 <malloc+0x62>
 622:	ef 01       	movw	r28, r30
 624:	9a 01       	movw	r18, r20
 626:	bd 01       	movw	r22, r26
 628:	df 01       	movw	r26, r30
 62a:	02 80       	ldd	r0, Z+2	; 0x02
 62c:	f3 81       	ldd	r31, Z+3	; 0x03
 62e:	e0 2d       	mov	r30, r0
 630:	d7 cf       	rjmp	.-82     	; 0x5e0 <malloc+0x1e>
 632:	21 15       	cp	r18, r1
 634:	31 05       	cpc	r19, r1
 636:	f9 f0       	breq	.+62     	; 0x676 <malloc+0xb4>
 638:	28 1b       	sub	r18, r24
 63a:	39 0b       	sbc	r19, r25
 63c:	24 30       	cpi	r18, 0x04	; 4
 63e:	31 05       	cpc	r19, r1
 640:	80 f4       	brcc	.+32     	; 0x662 <malloc+0xa0>
 642:	8a 81       	ldd	r24, Y+2	; 0x02
 644:	9b 81       	ldd	r25, Y+3	; 0x03
 646:	61 15       	cp	r22, r1
 648:	71 05       	cpc	r23, r1
 64a:	21 f0       	breq	.+8      	; 0x654 <malloc+0x92>
 64c:	fb 01       	movw	r30, r22
 64e:	93 83       	std	Z+3, r25	; 0x03
 650:	82 83       	std	Z+2, r24	; 0x02
 652:	04 c0       	rjmp	.+8      	; 0x65c <malloc+0x9a>
 654:	90 93 0b 01 	sts	0x010B, r25
 658:	80 93 0a 01 	sts	0x010A, r24
 65c:	fe 01       	movw	r30, r28
 65e:	32 96       	adiw	r30, 0x02	; 2
 660:	44 c0       	rjmp	.+136    	; 0x6ea <malloc+0x128>
 662:	fe 01       	movw	r30, r28
 664:	e2 0f       	add	r30, r18
 666:	f3 1f       	adc	r31, r19
 668:	81 93       	st	Z+, r24
 66a:	91 93       	st	Z+, r25
 66c:	22 50       	subi	r18, 0x02	; 2
 66e:	31 09       	sbc	r19, r1
 670:	39 83       	std	Y+1, r19	; 0x01
 672:	28 83       	st	Y, r18
 674:	3a c0       	rjmp	.+116    	; 0x6ea <malloc+0x128>
 676:	20 91 08 01 	lds	r18, 0x0108
 67a:	30 91 09 01 	lds	r19, 0x0109
 67e:	23 2b       	or	r18, r19
 680:	41 f4       	brne	.+16     	; 0x692 <malloc+0xd0>
 682:	20 91 02 01 	lds	r18, 0x0102
 686:	30 91 03 01 	lds	r19, 0x0103
 68a:	30 93 09 01 	sts	0x0109, r19
 68e:	20 93 08 01 	sts	0x0108, r18
 692:	20 91 00 01 	lds	r18, 0x0100
 696:	30 91 01 01 	lds	r19, 0x0101
 69a:	21 15       	cp	r18, r1
 69c:	31 05       	cpc	r19, r1
 69e:	41 f4       	brne	.+16     	; 0x6b0 <malloc+0xee>
 6a0:	2d b7       	in	r18, 0x3d	; 61
 6a2:	3e b7       	in	r19, 0x3e	; 62
 6a4:	40 91 04 01 	lds	r20, 0x0104
 6a8:	50 91 05 01 	lds	r21, 0x0105
 6ac:	24 1b       	sub	r18, r20
 6ae:	35 0b       	sbc	r19, r21
 6b0:	e0 91 08 01 	lds	r30, 0x0108
 6b4:	f0 91 09 01 	lds	r31, 0x0109
 6b8:	e2 17       	cp	r30, r18
 6ba:	f3 07       	cpc	r31, r19
 6bc:	a0 f4       	brcc	.+40     	; 0x6e6 <malloc+0x124>
 6be:	2e 1b       	sub	r18, r30
 6c0:	3f 0b       	sbc	r19, r31
 6c2:	28 17       	cp	r18, r24
 6c4:	39 07       	cpc	r19, r25
 6c6:	78 f0       	brcs	.+30     	; 0x6e6 <malloc+0x124>
 6c8:	ac 01       	movw	r20, r24
 6ca:	4e 5f       	subi	r20, 0xFE	; 254
 6cc:	5f 4f       	sbci	r21, 0xFF	; 255
 6ce:	24 17       	cp	r18, r20
 6d0:	35 07       	cpc	r19, r21
 6d2:	48 f0       	brcs	.+18     	; 0x6e6 <malloc+0x124>
 6d4:	4e 0f       	add	r20, r30
 6d6:	5f 1f       	adc	r21, r31
 6d8:	50 93 09 01 	sts	0x0109, r21
 6dc:	40 93 08 01 	sts	0x0108, r20
 6e0:	81 93       	st	Z+, r24
 6e2:	91 93       	st	Z+, r25
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <malloc+0x128>
 6e6:	e0 e0       	ldi	r30, 0x00	; 0
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	cf 01       	movw	r24, r30
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <free>:
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	00 97       	sbiw	r24, 0x00	; 0
 6f8:	09 f4       	brne	.+2      	; 0x6fc <free+0xa>
 6fa:	87 c0       	rjmp	.+270    	; 0x80a <free+0x118>
 6fc:	fc 01       	movw	r30, r24
 6fe:	32 97       	sbiw	r30, 0x02	; 2
 700:	13 82       	std	Z+3, r1	; 0x03
 702:	12 82       	std	Z+2, r1	; 0x02
 704:	c0 91 0a 01 	lds	r28, 0x010A
 708:	d0 91 0b 01 	lds	r29, 0x010B
 70c:	20 97       	sbiw	r28, 0x00	; 0
 70e:	81 f4       	brne	.+32     	; 0x730 <free+0x3e>
 710:	20 81       	ld	r18, Z
 712:	31 81       	ldd	r19, Z+1	; 0x01
 714:	28 0f       	add	r18, r24
 716:	39 1f       	adc	r19, r25
 718:	80 91 08 01 	lds	r24, 0x0108
 71c:	90 91 09 01 	lds	r25, 0x0109
 720:	82 17       	cp	r24, r18
 722:	93 07       	cpc	r25, r19
 724:	79 f5       	brne	.+94     	; 0x784 <free+0x92>
 726:	f0 93 09 01 	sts	0x0109, r31
 72a:	e0 93 08 01 	sts	0x0108, r30
 72e:	6d c0       	rjmp	.+218    	; 0x80a <free+0x118>
 730:	de 01       	movw	r26, r28
 732:	20 e0       	ldi	r18, 0x00	; 0
 734:	30 e0       	ldi	r19, 0x00	; 0
 736:	ae 17       	cp	r26, r30
 738:	bf 07       	cpc	r27, r31
 73a:	50 f4       	brcc	.+20     	; 0x750 <free+0x5e>
 73c:	12 96       	adiw	r26, 0x02	; 2
 73e:	4d 91       	ld	r20, X+
 740:	5c 91       	ld	r21, X
 742:	13 97       	sbiw	r26, 0x03	; 3
 744:	9d 01       	movw	r18, r26
 746:	41 15       	cp	r20, r1
 748:	51 05       	cpc	r21, r1
 74a:	09 f1       	breq	.+66     	; 0x78e <free+0x9c>
 74c:	da 01       	movw	r26, r20
 74e:	f3 cf       	rjmp	.-26     	; 0x736 <free+0x44>
 750:	b3 83       	std	Z+3, r27	; 0x03
 752:	a2 83       	std	Z+2, r26	; 0x02
 754:	40 81       	ld	r20, Z
 756:	51 81       	ldd	r21, Z+1	; 0x01
 758:	84 0f       	add	r24, r20
 75a:	95 1f       	adc	r25, r21
 75c:	8a 17       	cp	r24, r26
 75e:	9b 07       	cpc	r25, r27
 760:	71 f4       	brne	.+28     	; 0x77e <free+0x8c>
 762:	8d 91       	ld	r24, X+
 764:	9c 91       	ld	r25, X
 766:	11 97       	sbiw	r26, 0x01	; 1
 768:	84 0f       	add	r24, r20
 76a:	95 1f       	adc	r25, r21
 76c:	02 96       	adiw	r24, 0x02	; 2
 76e:	91 83       	std	Z+1, r25	; 0x01
 770:	80 83       	st	Z, r24
 772:	12 96       	adiw	r26, 0x02	; 2
 774:	8d 91       	ld	r24, X+
 776:	9c 91       	ld	r25, X
 778:	13 97       	sbiw	r26, 0x03	; 3
 77a:	93 83       	std	Z+3, r25	; 0x03
 77c:	82 83       	std	Z+2, r24	; 0x02
 77e:	21 15       	cp	r18, r1
 780:	31 05       	cpc	r19, r1
 782:	29 f4       	brne	.+10     	; 0x78e <free+0x9c>
 784:	f0 93 0b 01 	sts	0x010B, r31
 788:	e0 93 0a 01 	sts	0x010A, r30
 78c:	3e c0       	rjmp	.+124    	; 0x80a <free+0x118>
 78e:	d9 01       	movw	r26, r18
 790:	13 96       	adiw	r26, 0x03	; 3
 792:	fc 93       	st	X, r31
 794:	ee 93       	st	-X, r30
 796:	12 97       	sbiw	r26, 0x02	; 2
 798:	4d 91       	ld	r20, X+
 79a:	5d 91       	ld	r21, X+
 79c:	a4 0f       	add	r26, r20
 79e:	b5 1f       	adc	r27, r21
 7a0:	ea 17       	cp	r30, r26
 7a2:	fb 07       	cpc	r31, r27
 7a4:	79 f4       	brne	.+30     	; 0x7c4 <free+0xd2>
 7a6:	80 81       	ld	r24, Z
 7a8:	91 81       	ldd	r25, Z+1	; 0x01
 7aa:	84 0f       	add	r24, r20
 7ac:	95 1f       	adc	r25, r21
 7ae:	02 96       	adiw	r24, 0x02	; 2
 7b0:	d9 01       	movw	r26, r18
 7b2:	11 96       	adiw	r26, 0x01	; 1
 7b4:	9c 93       	st	X, r25
 7b6:	8e 93       	st	-X, r24
 7b8:	82 81       	ldd	r24, Z+2	; 0x02
 7ba:	93 81       	ldd	r25, Z+3	; 0x03
 7bc:	13 96       	adiw	r26, 0x03	; 3
 7be:	9c 93       	st	X, r25
 7c0:	8e 93       	st	-X, r24
 7c2:	12 97       	sbiw	r26, 0x02	; 2
 7c4:	e0 e0       	ldi	r30, 0x00	; 0
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	9b 81       	ldd	r25, Y+3	; 0x03
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <free+0xe4>
 7d0:	fe 01       	movw	r30, r28
 7d2:	ec 01       	movw	r28, r24
 7d4:	f9 cf       	rjmp	.-14     	; 0x7c8 <free+0xd6>
 7d6:	ce 01       	movw	r24, r28
 7d8:	02 96       	adiw	r24, 0x02	; 2
 7da:	28 81       	ld	r18, Y
 7dc:	39 81       	ldd	r19, Y+1	; 0x01
 7de:	82 0f       	add	r24, r18
 7e0:	93 1f       	adc	r25, r19
 7e2:	20 91 08 01 	lds	r18, 0x0108
 7e6:	30 91 09 01 	lds	r19, 0x0109
 7ea:	28 17       	cp	r18, r24
 7ec:	39 07       	cpc	r19, r25
 7ee:	69 f4       	brne	.+26     	; 0x80a <free+0x118>
 7f0:	30 97       	sbiw	r30, 0x00	; 0
 7f2:	29 f4       	brne	.+10     	; 0x7fe <free+0x10c>
 7f4:	10 92 0b 01 	sts	0x010B, r1
 7f8:	10 92 0a 01 	sts	0x010A, r1
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <free+0x110>
 7fe:	13 82       	std	Z+3, r1	; 0x03
 800:	12 82       	std	Z+2, r1	; 0x02
 802:	d0 93 09 01 	sts	0x0109, r29
 806:	c0 93 08 01 	sts	0x0108, r28
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	08 95       	ret

00000810 <memset>:
 810:	dc 01       	movw	r26, r24
 812:	01 c0       	rjmp	.+2      	; 0x816 <memset+0x6>
 814:	6d 93       	st	X+, r22
 816:	41 50       	subi	r20, 0x01	; 1
 818:	50 40       	sbci	r21, 0x00	; 0
 81a:	e0 f7       	brcc	.-8      	; 0x814 <memset+0x4>
 81c:	08 95       	ret

0000081e <_exit>:
 81e:	f8 94       	cli

00000820 <__stop_program>:
 820:	ff cf       	rjmp	.-2      	; 0x820 <__stop_program>
